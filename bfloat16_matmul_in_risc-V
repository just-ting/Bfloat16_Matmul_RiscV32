.data
.align 2
A:      .word 0x3F9DF3B6, 0x401D2F1B, 0x406B645A, 0x409C7AE1  # A[0][0] = 1.234, A[0][1] = 2.456 (float32), A[1][0] = 3.678, A[1][1] = 4.890 (float32)
        .align 2
B:      .word 0x40071AA0, 0x3F9C6A7F, 0x3EAA7EFA, 0x405C6A7F  # B[0][0] = 2.111, B[0][1] = 1.222 (float32), B[1][0] = 0.333, B[1][1] = 3.444 (float32)
        .align 2
C:      .word 0, 0, 0, 0
        .align 2
sign_mask: .word 0x80000000
exp_mask: .word 0x7F800000
man_mask: .word 0x7F0000
bfloat_sign_mask: .word 0x8000
bfloat_exp_mask: .word 0x7F80
bfloat_man_mask: .word 0x007F
str1:   .string "C ="  # output message 1
str2:   .string ", "  # output message 2
str3:   .string "overflow!"  # output message 3
               
.text
matmul:
    la a6, C
    # calculate C[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0]
    lw a0, A            # a0 = A[0][0]
    lw a1, B            # a1 = B[0][0]
    jal bfloat16_mul       # a0 * a1
    mv a4, a3
    
    lw a0, A+4               # a0 = A[0][1]
    lw a1, B+8               # a1 = B[0][1] 
    jal bfloat16_mul       # a0 * a1
    mv a5, a3
    
    jal bfloat16_add
    sw a3, 0(a6)

    
    # calculate C[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1]
    lw a0, A-4           # a0 = A[0][0]
    lw a1, B-4            # a1 = B[0][1]
    jal bfloat16_mul       # a0 * a1
    mv a4, a3
    
    lw a0, A+4               # a0 = A[0][1]
    lw a1, B+8               # a1 = B[1][1] 
    jal bfloat16_mul       # a0 * a1
    mv a5, a3
    
    jal bfloat16_add
    addi a6, a6, 4
    sw a3, 0(a6)
 
    
    # calculate C[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0]
    lw a0, A+4           # a0 = A[1][0]
    lw a1, B-12            # a1 = B[0][0]
    jal bfloat16_mul       # a0 * a1
    mv a4, a3
 
    lw a0, A+4               # a0 = A[1][1]
    lw a1, B+8               # a1 = B[1][0] 
    jal bfloat16_mul       # a0 * a1
    mv a5, a3
    
    jal bfloat16_add
    addi a6, a6, 4
    sw a3, 0(a6)

    
    # calculate C[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1]
    lw a0, A-4          # a0 = A[1][0]
    lw a1, B-4            # a1 = B[0][1]
    jal bfloat16_mul       # a0 * a1
    mv a4, a3

    lw a0, A+4               # a0 = A[0][1]
    lw a1, B+8               # a1 = B[1][1] 
    jal bfloat16_mul       # a0 * a1
    mv a5, a3
    
    jal bfloat16_add
    addi a6, a6, 4
    sw a3, 0(a6)
       
    # Call the function to print the result
    jal ra, printResult
 
    # finish
    li a7, 10        
    ecall  

# bfloat16 multiplier
# input: a0, a1 (ieee 754 float)
# output: a3 (bfloat16)
# t0, t1: A_sign, B_sign 
# t2, t3: A_exp, B_exp
# t4, t5: A_man, B_man
# t6: sign_mask, exp_mask, man_mask, overflow, normalize
bfloat16_mul:
    lw t6, sign_mask   # t6 = sign_mask
    and t0, a0, t6      # A_sign
    and t1, a1, t6      # B_sign
    xor a3, t0, t1 # calculate new sign
    srli a3, a3, 16

    lw t6, exp_mask  # t6 = exp_mask
    and t2, a0, t6   # A_exp
    srli t2, t2, 23 
    addi t2, t2, -127
    and t3, a1, t6   # B_exp
    srli t3, t3, 23
    addi t3, t3, -127
    add t2, t2, t3 	# calculate new exp
    addi t2, t2, 127
    slli t2, t2, 7

    lw t6, man_mask  # t6 = man_mask
    and t4, a0, t6   # A_mant
    srli t4, t4, 16
    addi t4, t4, 0x0080   # add 1.
    and t5, a1, t6   # B_mant
    srli t5, t5, 16 
    addi t5, t5, 0x0080
    mul t4, t4, t5        # calculate new mant
    srli t6, t4, 15        # check if overflow
    bne t6, zero, overflow
    andi t6, t4, 0x80     # check if need to normalize
    beq t6, zero, normalize
    or a3, a3, t2
    or a3, a3, t5

normalize:
    srli t3, t3, 1
    addi t2, t2, 1
    jr ra
    
overflow:
    la a0, str3                # Load the address of the string
    li a7, 4                   # System call code for printing a string
    ecall                      # Print the string

    li a7, 10        
    ecall  

# bfloat16 adder
# input: a4, a5 (bfloat16)
# output: a3 (bfloat16)
# t0, t1: A_sign, B_sign 
# t2, t3: A_exp, B_exp
# t4, t5: A_man, A_man
# t6: bfloat_sign_mask, bfloat_exp_mask, man_mask, overflow, normalize    
bfloat16_add:
    # sign
    lw t6, bfloat_sign_mask
    and t0, a4, t6 # A_sign
    and t1, a5, t6 # B_sign
    
    # exp
    lw t6, bfloat_exp_mask
    and t2, a4, t6 # A_exp
    and t3, a5, t6 # B_exp
    
    # man    
    lw t6, bfloat_man_mask
    and t4, a4, t6 # A_man
    and t5, a5, t6 # B_man

    # calculate exact exp
    srli t2, t2, 7         
    srli t3, t3, 7
    addi t2, t2, 127       
    addi t3, t3, 127          

    # calculate exact man
    ori t4, t4, 0x0080         # add 1.
    ori t5, t5, 0x0080             

    # align man
    beq t2, t3, add_man       # A_exp = B_exp, add
    blt t2, t3, shift_a       # A_exp < B_exp, shift
    sub t6, t2, t3            # A_exp - B_exp
    srl t4, t4, t6            # shift A_man
    j add_man
    
shift_a:
    sub t6, t3, t2            # B_exp - A_exp
    srl t5, t5, t6            # shift B_man
    j add_man

add_man:
    beq t0, t1, same_sign      # 符號相同，直接加
    blt t4, t5, sub_man        # A_man < B_man
    sub t4, t4, t5             # A_man - B_man
    j normalize_man

same_sign:
    add t4, t4, t5
    
sub_man:
    sub t4, t5, t4             # B_man - A_man

normalize_man:
    # check if normalize
    srli t6, t4, 8            # man bit 9 != 1
    bnez t6, combine          
    slli t0, t0, 1            # shift man
    addi t2, t2, 1            # exp + 1

combine:
    srli t0, t0, 1              # man shift back
    or a3, t0, t2           
    or a3, a3, t4      
    jr ra


printResult:
     
     mv t0, a6                  # Save output value (C) in temporary register t0
     addi t0, t0, -12

     la a0, str1                # Load the address of the string "C =" 
     li a7, 4                   # System call code for printing a string
     ecall                      # Print the string

     mv a0, t0                  # Move the original input value (X) to a0 for printing
     li a7, 1                   # System call code for printing an integer
     ecall                      # Print the integer (element of matrix C)

     la a0, str2                # Load the address of the string", " 
     li a7, 4                   # System call code for printing a string
     ecall                      # Print the string
    
     addi t0, t0, 4
     lw a0, 0(t0)               # Move the original input value (X) to a0 for printing
     li a7, 1                   # System call code for printing an integer
     ecall                      # Print the integer (element of matrix C)

     la a0, str2                # Load the address of the string", " 
     li a7, 4                   # System call code for printing a string
     ecall

     addi t0, t0, 4
     lw a0, 0(t0)               # Move the original input value (X) to a0 for printing
     li a7, 1                   # System call code for printing an integer
     ecall                      # Print the integer (element of matrix C)

     la a0, str2                # Load the address of the string", " 
     li a7, 4                   # System call code for printing a string
     ecall
   
     addi t0, t0, 4
     lw a0, 0(t0)               # Move the original input value (X) to a0 for printing
     li a7, 1                   # System call code for printing an integer
     ecall                      # Print the integer (element of matrix C)

     ret  
